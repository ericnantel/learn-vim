
set nocompatible
filetype off

set splitright
set splitbelow

set undodir=~/.vim/undodir
set undofile

set number
set relativenumber
set signcolumn=yes
set numberwidth=2

set ignorecase
set smartcase
set incsearch
set hlsearch

set tabstop=4
set softtabstop=4
set shiftwidth=4
"set shiftround
set noexpandtab
set autoindent
set smartindent

set nowrap
set noshowmatch
set noruler
set notitle
set nocursorline
set nobackup
set nowritebackup

"set mouse=
"set ttymouse=
"set mousescroll=ver:0,hor:0
set encoding=UTF-8
set backspace=indent,eol,start
set clipboard^=unnamed,unnamedplus

set background=dark
syntax on
set t_Co=256
" Comment this if your terminal doesn't support it
" But I mainly enabled it to fix airline and/or ailine_theme plugin(s)
set termguicolors

set scrolloff=5
set showcmd
set showmode
set cmdheight=1
set laststatus=2
set updatetime=300
set timeout
set timeoutlen=300
set history=20

set hidden

set wildmenu
set wildmode=longest:full,full
set wildignore+=*.swp,*.DS_Store,*.meta

" Runtime paths for colorschemes, plugins, clang tools
set rtp+=~/.vim
set rtp+=~/.vim/plugged/vim-plug
if has("win32")
	if isdirectory(expand("~/scoop/apps/llvm/current/bin"))
		set rtp+=~/scoop/apps/llvm/current/bin
	endif
endif

" Make sure to have ~/.vim/colors/darcula.vim
" You can find it in my dotfiles submodules
" https://github.com/ericnantel/dotfiles/tree/main/colorschemes
" or comment the line below
colorscheme darcula

let g:mapleader = ' '
let g:maplocalleader = ' '

imap jk <ESC>
vmap jk <ESC>

nnoremap + <C-a>
nnoremap - <C-x>

nmap <leader>sv <C-w>v
nmap <leader>sh <C-w>s
nmap <leader>se <C-w>=
nmap <leader>sx <cmd>close<CR>

nmap <leader>nh <cmd>nohlsearch<CR>

" vim-tmux-navigator
nnoremap <silent> <c-h> <cmd>TmuxNavigateLeft<CR>
nnoremap <silent> <c-j> <cmd>TmuxNavigateDown<CR>
nnoremap <silent> <c-k> <cmd>TmuxNavigateUp<CR>
nnoremap <silent> <c-l> <cmd>TmuxNavigateRight<CR>
let g:tmux_navigator_no_mappings = 1
let g:tmux_navigator_save_on_switch = 0
"let g:tmux_navigator_disable_when_zoomed = 1
"let g:tmux_navigator_preserve_zoom = 1
let g:tmux_navigator_no_wrap = 1

" vim-maximizer
nnoremap <leader>sm <cmd>MaximizerToggle<CR>
vnoremap <leader>sm <cmd>MaximizerToggle<CR>gv
let g:maximizer_set_default_mapping = 1

" vim-signature
let g:SignatureWrapJumps = 1
let g:SignatureMarkTextHLDynamic = 1

" vim-commentary
nmap <silent> z gc
nmap <silent> zz gcc
vmap <silent> z gc
autocmd FileType glsl setlocal commentstring=//\ %s
autocmd FileType lisp setlocal commentstring=;;\ %s

" vim-devicons
let g:webdevicons_enable_airline_tabline = 1
let g:webdevicons_enable_airline_statusline = 1

" vim-airline + vim-airline-themes
"let g:airline#extensions#ale#enabled = 1
"let g:airline#extensions#ale#error_symbol = 'Error'
"let g:airline#extensions#ale#warning_symbol = 'Warning:'
"let g:airline#extensions#ale#show_line_numbers = 1
let g:airline#extensions#fugitiveline#enabled = 1
let g:airline#extensions#fzf#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
" let g:airline_powerline_fonts = 1
let g:airline_theme = 'zenburn'

" vim-gitgutter
" NOTE: if you're using coc-git then you might want to disable gitgutter_signs
let g:gitgutter_enabled = 1
let g:gitgutter_signs = 1
let g:gitgutter_async = 1

" vim-fugitive
"

" vim-which-key
nnoremap <silent> <leader> :<c-u>WhichKey '<Space>'<CR>
vnoremap <silent> <leader> :<c-u>WhichKeyVisual '<Space>'<CR>
let g:which_key_ignore_outside_mappings = 0
let g:which_key_use_floating_win = 1
let g:which_key_max_size = 0
let g:which_key_sep = "->"
let g:which_key_map = {}
let g:which_key_map['+'] = ['<C-a>', "number-increment"]
let g:which_key_map['-'] = ['<C-x>', "number-decrement"]
let g:which_key_map.s = {
	\ 'name': "+split",
	\ 'v': ['<C-w>v', "split-vertical"],
	\ 'h': ['<C-w>s', "split-horizontal"],
	\ 'e': ['<C-w>=', "split-equal"],
	\ 'm': [':MaximizerToggle', "split-maximize-toggle"],
	\ 'x': [':close', "split-close"],
	\ '<Right>': ['<C-w>5>', "split-increment-width"],
	\ '<Left>': ['<C-w>5<', "split-decrement-width"],
	\ '<Down>': ['<C-w>+', "split-increment-height"],
	\ '<Up>': ['<C-w>-', "split-decrement-height"],
	\ }
let g:which_key_map.f = {
	\ 'name': "+find",
	\ 'f': [':Files<CR>', "find-files"],
	\ 's': [':Rg<CR>', "find-grep"],
	\ 'c': [':Rg <C-r><C-w><CR>', "find-files"],
	\ }
let g:which_key_map['nh'] = [':nohlsearch', "suspend-hlsearch-highlighting"]
let g:which_key_map_visual = {}
let g:which_key_map_visual['+'] = ['<C-a>', "number-increment"]
let g:which_key_map_visual['-'] = ['<C-x>', "number-decrement"]
let g:which_key_map_visual.s = {
	\ 'name': "+split",
	\ 'v': ['<C-w>v', "split-vertical"],
	\ 'h': ['<C-w>s', "split-horizontal"],
	\ 'e': ['<C-w>=', "split-equal"],
	\ 'm': [':MaximizerToggle<CR>gv', "split-maximize-toggle"],
	\ 'x': [':close', "split-close"],
	\ '<Right>': ['<C-w>5>', "split-increment-width"],
	\ '<Left>': ['<C-w>5<', "split-decrement-width"],
	\ '<Down>': ['<C-w>+', "split-increment-height"],
	\ '<Up>': ['<C-w>-', "split-decrement-height"],
	\ }

" fzf.vim
" TODO: Fix ripgrep or gitignore because it does not show dotfiles
" TODO: f/ search in current file with preview
nnoremap <leader>ff <cmd>Files<CR>
nnoremap <leader>fs <cmd>Rg<CR>
nnoremap <leader>fc :Rg <C-r><C-w><CR>
let g:fzf_vim = {}
let g:fzf_vim.buffers_jump = 1
let g:fzf_vim.buffers_options = '--style full --border-label "Open Buffers "'
let g:fzf_vim.grep_multi_line = 0
let g:fzf_vim.listproc = { list -> fzf#vim#listproc#quickfix(list) }
function! s:build_quickfix_list(lines)
	call setqflist(map(copy(a:lines), '{ "filename": v:val, "lnum": 1 }'))
	copen
	cc
endfunction
" TODO: Add smart selection to quickfix list
" Which is if we don't select anything, then select all
let g:fzf_action = {
	\ 'ctrl-q': function('s:build_quickfix_list')
	\ }
let g:fzf_layout = {
	\ 'window': { 'width': 0.85, 'height': 0.85, 'relative': v:true, 'yoffset': 0.0 }
	\ }
let g:fzf_colors = {
	\ 'fg': ['fg', 'Normal'],
	\ 'bg': ['bg', 'Normal'],
	\ 'query': ['fg', 'Normal'],
	\ 'hl': ['fg', 'Comment'],
	\ 'fg+': ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
	\ 'bg+': ['bg', 'CursorLine', 'CursorColumn'],
	\ 'hl+': ['fg', 'Statement'],
	\ 'info': ['fg', 'PreProc'],
	\ 'border': ['fg', 'Ignore'],
	\ 'prompt': ['fg', 'Conditional'],
	\ 'pointer': ['fg', 'Exception'],
	\ 'marker': ['fg', 'Keyword'],
	\ 'spinner': ['fg', 'Label'],
	\ 'header': ['fg', 'Comment']
	\ }
let g:fzf_history_dir = '~/.local/share/fzf-history'

" Plugins
" Dependencies:
" vim-plug -> git, curl (optional to download plug.vim)
" vim-tmux-navigator -> tmux (optional but recommended)
" vim-maximizer ->
" vim-signature -> 
" vim-commentary ->
" vim-devicons -> nerd-font
" vim-airline ->
" vim-airline-themes ->
" vim-gitgutter -> git
" vim-fugitive -> git
" vim-which-key ->
" fzf.vim -> fzf, ripgrep, bat
call plug#begin('~/.vim/plugged')
	" Make sure to use single quotes
	Plug 'christoomey/vim-tmux-navigator'
	Plug 'szw/vim-maximizer'
	Plug 'kshenoy/vim-signature'
	Plug 'tpope/vim-commentary'
	Plug 'ryanoasis/vim-devicons'
	Plug 'vim-airline/vim-airline'
	Plug 'vim-airline/vim-airline-themes'
	Plug 'airblade/vim-gitgutter'
	Plug 'tpope/vim-fugitive'
	Plug 'liuchengxu/vim-which-key'
	Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
	Plug 'junegunn/fzf.vim'
call plug#end()

call which_key#register('<Space>', "g:which_key_map", 'n')
call which_key#register('<Space>', "g:which_key_map_visual", 'v')

